5.1. Extending container privileges with capabilities

Linux capabilities: there are currently 26 different Linix capabilities that can be added or removed to your DOcker container. Your DOcker container comes with some of them added already, but it is eay to change them by using cap_add and cap_drop flags when running your container.

Cap-add takes precedence over cap-drop, and you can use both in the same run docker command.

Here are some examples:

docker run --entrypoint sh --rm alpine -c 'touch /tmp/file && CHOWN 1001:1001 /tmp/file && echo "File permission changed."'


docker run --entrypoint sh --cap-drop CAP_CHOWN  --rm alpine -c 'touch /tmp/file && CHOWN 1001:1001 /tmp/file && echo "File permission changed."'


docker run --entrypoint sh --cap-drop CAP_CHOWN --cap-add CHOWN --rm alpine -c 'touch /tmp/file && CHOWN 1001:1001 /tmp/file && echo "File permission changed."'

You can use cap-drop all and then add the capabilities you need.

docker run --entrypoint sh --cap-add CHOWN --cap-drop ALL --rm alpine -c 'touch /tmp/file && CHOWN 1001:1001 /tmp/file && echo "File permission changed."'


You can give your container access to specific devices by using --device flag. This is useful if you want your container to use USB devices or GPU cards

docker run --device

The flag --privileged gives access to your container to use everything and to access everyting including devices on your system like your hard drive.


5.2. Setting container limits: Part 1

Memory starvation - one of the possible issues with containers if not used controls properly to set resource limits.

Name spaces specify the resources that containers can see or access on a system.
Contol groups specify how much of those resources containers can consume. Control groups help you specify rules like: this app can use only 2 CPUs, this app can use no more than 8 MegaByets of Memory.

Docker container can use flags like:
--cpus 0.00 -> max processor time
--memory 1G -> max memory
--cpu-period -> time to wait until receiving processor time
--cpu-quota -> max amount of time to use when processor time received

examples:

--cpu-period 1000000 --cpu-quota 400000
40% max CPU, 1 CPU

--cpu-period 500000 --cpu-quota 400000
40% max CPU, 2 CPU
--cpus 1.4 -> the same as above but put tpgether

5.2. Setting container limits: Part 2

#command for properties
top -d 0.1

#build the image
docker build -t stress .

#run the stress image
docker run --rm stress --cpu 4 --timeout 5

#run the stress image with --cpus flag
docker run --rm --cpus 1.6 stress --cpu 4 --timeout 5

#increase timeout to 15
docker run --rm stress --cpu 4 --timeout 15

#build the image with --cpu-period flag
docker run --rm --cpu-period 100000 --cpu-quota 160000 stress --cpu 4 --timeout 15

#build the image with --cpu-period flag changed
docker run --rm --cpu-period 60000 --cpu-quota 100000 stress --cpu 4 --timeout 15

#run the stress image with 1 VM
docker run --rm stress --vm 1 --vm-bytes 3.99G --timeout 15

#run the stress image with memory limit 2GB
docker run --memory 2G --rm stress --vm 1 --vm-bytes 3.99G --timeout 15



