#create and edit the Dockerfile:
touch Dockerfile
vim Dockerfile

#build the docker image:
sudo docker image build .

#edit the Dockerfile:
vim Dockerfile

#build the docker image:
sudo docker image build .

#list all docker images:
sudo docker image ls

#run the image:
sudo docker run --rm 4f7a77b3e9de

#inspect the image
sudo docker image inspect 4f7a77b3e9de

#run the image with listing the contents of /app directory
sudo docker run --rm 4f7a77b3e9de ls /app

#inspect the image:
sudo docker image inspect 4f7a77b3e9de

#open from 04_06_before:
vim ubuntu.Dockerfile

COPY - more secure version of ADD

Wildcards:
? -> matches only 1 character
* -> matches all characters after a word until next non-asteriks character
Arguments:
--chown $user: $group -> assigns $user as owner if the file in the container image
--link -> copies files into a blank layer

#build docker image:
sudo docker image build .

#run the image:
sudo docker run --rm 4f7a77b3e9de

#list all docker  images
sudo docker image ls

#inspect the image:
sudo docker image inspect 4f7a77b3e9de

#pass the ls command to the container:
03_before$ sudo docker run --rm 4f7a77b3e9de ls /app
Dockerfile
app.sh
include

4.7.
2 ways to use RUN:

1. RUN command-in-shell-form -> example: RUN echo "Hello,world!". These commands will be forked from a shell which can implicate how we need to terminate the hung programs with CTRL+C or the way how the text is displayed into a terminal.
2. RUN ["command", "in","exec","form"] -> example: RUN ["echo","Hello,world!"]. These commands run directly in the container without a shell.update 

#update Dockerfile in 04_07_before

#build docker image:
sudo docker image build .

#run the curl command:
sudo docker run --rm e6a4fb87d5d13 curl example.com

4.8. 
Starting your app with ENTRYPOINT:

1. ENTRYPOINT command: signals sent to the app are caught by the shell-not the app. 
2. ENTRYPOINT ["command","in","exec","form"]


#edit Dockerfile in 04_08_before

#build docker image:
sudo docker image build .

#run the docker image:
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_08_before$ sudo docker run --rm db7bebf971c6aa431ba
============================================================

     🎉🎉🎉🎉🎉 WELCOME TO THE DATE APP!!! 🎉🎉🎉🎉🎉

============================================================
INFO: Fetching date from the Internet. Hang on!


🕰️  The date is: Wed Dec  6 08:37:17 UTC 2023

⚙️  Here's what's running in your container:

UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 08:37 ?        00:00:00 /bin/sh -c /app/app.sh
root         7     1  0 08:37 ?        00:00:00 bash /app/app.sh
root        16     7  0 08:37 ?        00:00:00 ps -ef


⚙️  0 arguments were provided to this application.

#provide an argument at the end:

(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_08_before$ sudo docker run --rm db7bebf971c6aa431ba --argument
============================================================

     🎉🎉🎉🎉🎉 WELCOME TO THE DATE APP!!! 🎉🎉🎉🎉🎉

============================================================
INFO: Fetching date from the Internet. Hang on!


🕰️  The date is: Wed Dec  6 08:41:51 UTC 2023

⚙️  Here's what's running in your container:

UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 08:41 ?        00:00:00 /bin/sh -c /app/app.sh --argument
root         6     1  0 08:41 ?        00:00:00 bash /app/app.sh
root        15     6  0 08:41 ?        00:00:00 ps -ef


⚙️  0 arguments were provided to this application.

#edit the DOckerfile

#build the Docker image with the name:
sudo docker image build . -t my-image

#run the named image
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_08_before$ sudo docker run --rm my-image --argument
============================================================

     🎉🎉🎉🎉🎉 WELCOME TO THE DATE APP!!! 🎉🎉🎉🎉🎉

============================================================
INFO: Fetching date from the Internet. Hang on!


🕰️  The date is: Wed Dec  6 08:47:32 UTC 2023

⚙️  Here's what's running in your container:

UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 08:47 ?        00:00:00 bash /app/app.sh --argument
root        15     1  0 08:47 ?        00:00:00 ps -ef


We also got some arguments: --argument

4.9. 
CMD's behaviour depends on:
-> wheter an ENTRYPOINT is provided or not
-> whether CMD is written in shell or in exec form

1. ENTRYPOINT missing, CMD provided: launches the container with the app as top lvl process
2. ENTRYPOINT provided, CMD provided: everything provided to CMD will be provided to ENTRYPOINT as arguments
3. ENTRYPOINT provided, CMD missing: ENTRYPOINT will behave as it has no arguments
4. ENTRYPOINT missing, CMD missing:it can inheret these from the base image if they are defined there

#edit Dockerfile in 04_09_before

#build the image:
sudo docker image build . -t my-image

#run the image without arguments:
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_09_before$ sudo docker run --rm my-image                                        
============================================================

     🎉🎉🎉🎉🎉 WELCOME TO THE DATE APP!!! 🎉🎉🎉🎉🎉

============================================================
INFO: Fetching date from the Internet. Hang on!


🕰️  The date is: Wed Dec  6 09:03:26 UTC 2023

⚙️  Here's what's running in your container:

UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 09:03 ?        00:00:00 bash /app/app.sh
root        14     1  0 09:03 ?        00:00:00 ps -ef


⚙️  0 arguments were provided to this application.

#run the image with the argument provided:
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_09_before$ sudo docker run --rm my-image --argument
docker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "--argument": executable file not found in $PATH: unknown.

#edit the Dockerfile

#build the new image
sudo docker image build . -t my-image

#run the image:
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_09_before$ sudo docker run --rm my-image --whatever
============================================================

     🎉🎉🎉🎉🎉 WELCOME TO THE DATE APP!!! 🎉🎉🎉🎉🎉

============================================================
INFO: Fetching date from the Internet. Hang on!


🕰️  The date is: Wed Dec  6 09:08:19 UTC 2023

⚙️  Here's what's running in your container:

UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 09:08 ?        00:00:00 bash /app/app.sh --whatever
root        15     1  0 09:08 ?        00:00:00 ps -ef


We also got some arguments: --whatever



⚙️  1 arguments were provided to this application.

#edit the Dockerfile

#build the image

#run the image:
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_09_before$ sudo docker run --rm my-image
============================================================

     🎉🎉🎉🎉🎉 WELCOME TO THE DATE APP!!! 🎉🎉🎉🎉🎉

============================================================
INFO: Fetching date from the Internet. Hang on!


🕰️  The date is: Wed Dec  6 09:10:54 UTC 2023

⚙️  Here's what's running in your container:

UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 09:10 ?        00:00:00 bash /app/app.sh --argument
root        15     1  0 09:10 ?        00:00:00 ps -ef


We also got some arguments: --argument



⚙️  1 arguments were provided to this application.

(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_09_before$ sudo docker run --rm my-image --whatever
============================================================

     🎉🎉🎉🎉🎉 WELCOME TO THE DATE APP!!! 🎉🎉🎉🎉🎉

============================================================
INFO: Fetching date from the Internet. Hang on!


🕰️  The date is: Wed Dec  6 09:11:52 UTC 2023

⚙️  Here's what's running in your container:

UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 09:11 ?        00:00:00 bash /app/app.sh --argument --whatever
root        16     1  0 09:11 ?        00:00:00 ps -ef


We also got some arguments: --argument



We also got some arguments: --whatever



⚙️  2 arguments were provided to this application.


4.10. Adding variables with ENV and ARG:

Build areguments can be set using ARG which allows us to set a variable at build time. We are using $curl_bin variable that is passed by the user at run time by using the --build-arg flag. 

ARG curl_bin = curl
RUN apt -y update && apt -y install "$curl_bin"

Setting environment varibles with ENV: ENV configures environment variables for containers started from this image. We were using $curl_bin as an ENV variable in this example. 

ENV curl_bin = "curl=7.85.0"
RUN apt -y update && apt -y install "$curl_bin"

Both can be set to deafult values to provide an option for user to change it at runtime.

Differences: 
1. ENV  variables are defined for every container started from an image and live with every container - ARG variables are only available during runtime.
2. ARG are set at build time, while ENV are set at run time. You can not override ENV variables thru docker build.

Similarities:
1. You can only use ENV and ARG variables withing the RUN commands
2. Both ENV and ARG variables must be set before the RUN command in order to use them in the RUN command that references them

#edited Dockerfile in 04_09
  4 ARG curl_bin="curl"
  5 RUN apt -y update && apt -y install "$curl_bin"

#build the image my-image
sudo docker image build . -t my-image

#run the image
sudo docker run --rm my-image --argument

#rebuild the image with providing the faulty curl argument
sudo docker image build . -t my-image --build-arg curl_bin=invalid .

#echo from the container gets empty string
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_09_before$ sudo docker run --rm --entrypoint sh my-image -c 'echo $curl_bin'


#edit the Dockerfile
ENV curl_bin="curl"
RUN apt -y update && apt -y install "$curl_bin"

#build the image
sudo docker image build . -t my-image

#run the image
sudo docker run --rm  my-image --argument

#run the image with echo prints "curl"
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_09_before$ sudo docker run --rm --entrypoint sh my-image -c 'echo $curl_bin'
curl

4.11. OTHER helpful Docker commands

https://docs.docker.com/engine/reference/builder/

LABEL -> accepts key-value: used for documentation

WORKDIR-> sets working directory for RUN commands and containers, can be used multiple times to change the working directory while building

USER-> sets user for RUN commands or container
->can be overriden by providing docker run --user flag

#example in Dockerfile:
RUN useradd -p supersecret newuser
USER newuser
...

EXPOSE ->documents ports that containers created from the image should expose

4.12. Multi stage builds
size_diff.sh script to compare the size of the image to the size of the app.


We can create two Dockerfiles and use the builder pattern to make our image slimmer and faster::/app/include/
#example:
docker create --name get-date-text my-image && 
docker cp get-date-text:/app/iclude/date.txt . &&
docker build -t my-smaller-image -f smaller.Dockerfile .

Disadvantages:
-> complexity
-> hard to maintain
-> more artifacts

This is solved by using multi-stage builds that allow you to use multiple base images
Each froup of commands under a base image is called a stage
The last stage is the stage used to create your final image.
Stages are count from 0.
They use COPY --from flag
You can ase aliases to name each of the stages.

Other features:
You can reference external images in COPY --from commands and reuse stages.

Benefits:
-> Small final images
-> much faster and less fragile
-> security 

#example:
tiny.Dockerfile

4.13. Multi platform images
#uname -a
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_12_after$ uname -a
Linux tea-XPS-13-7390 5.4.0-150-generic #167~18.04.1-Ubuntu SMP Wed May 24 00:51:42 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux

#sudo docker run --rm alpine uname -a 
Unable to find image 'alpine:latest' locally
latest: Pulling from library/alpine
661ff4d9561e: Pull complete 
Digest: sha256:51b67269f354137895d43f3b3d810bfacd3945438e94dc5ac55fdac340352f48
Status: Downloaded newer image for alpine:latest
Linux e69e24a0aca4 5.4.0-150-generic #167~18.04.1-Ubuntu SMP Wed May 24 00:51:42 UTC 2023 x86_64 Linux

#docker run --rm --platform linux/arm64 alpine uname -a
(base) tea@tea-XPS-13-7390:~/code/Docker/Ex_Files_Docker_EssT/Exercise Files/04_12_after$ sudo docker run --rm --platform linux/arm64 alpine uname -a
Unable to find image 'alpine:latest' locally
latest: Pulling from library/alpine
c30352492317: Pull complete 
Digest: sha256:51b67269f354137895d43f3b3d810bfacd3945438e94dc5ac55fdac340352f48
Status: Downloaded newer image for alpine:latest
exec /bin/uname: exec format error

qemu-user-static -> emulator qus, allows DOcker to emulate diiferent proccessor types while processing run commands during image builds

#docker run --privileged --rm aptman/qus --static -- --path arm

#sudo apt -y update

#sudo apt -y install qemu qemu-system-misc qemu-user binfmt-support 

#docker build -t my-image:latest-x86 --pull

#docker build -t my-image:latest-arm --platform linux/arm--pull .

#docker run --rm my-image:latest-arm

4.14. Multi app images

Alternatives:
-> multiple containers on a single network
-> using docker compose
-> using orchestrator like DOcker Swarm or Kubernetes

Ways to do it:
-> using ENTRYPOINT scripts
#example
./my_first_process &
./my_second_process &

#then use --init flag
docker run --init

#other options:
install and configure systemd in the image
install s6-overlay


